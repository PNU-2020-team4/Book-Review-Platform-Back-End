<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="com.team4.bookreview.bookMapper">
    <select id="selectAll" resultType="com.team4.bookreview.vo.BookVO">
        SELECT *
        FROM book
    </select>
    
    <select id="select" parameterType="int" resultType="com.team4.bookreview.vo.BookVO">
    	SELECT * 
    	FROM book
    	WHERE idx = #{idx};
    </select>

    <insert id="insert" parameterType="com.team4.bookreview.vo.BookVO" useGeneratedKeys="true" keyProperty="idx">
        INSERT INTO book (idx, name, author, genre)
        VALUES (#{idx}, #{name}, #{author}, #{genre});
    </insert>
    
    <select id="insertNoDup" parameterType="com.team4.bookreview.vo.BookVO"  resultType ="int" >
        INSERT IGNORE INTO book (idx, name, author)
		VALUES (#{idx}, #{name}, #{author});
    </select>

    <update id="delete" parameterType="int">
        DELETE 
        FROM book
        WHERE idx = #{idx};
    </update>

    <select id="searchAuthor" parameterType="com.team4.bookreview.vo.BookVO" resultType="com.team4.bookreview.vo.BookVO">
        SELECT *
        FROM book
        WHERE author LIKE #{author};
    </select>

    <select id="searchName" parameterType="com.team4.bookreview.vo.BookVO" resultType="com.team4.bookreview.vo.BookVO">
        SELECT *
        FROM book
        WHERE name LIKE #{name};
    </select>
    
      <select id="getIndexByAuthorAndName" parameterType="HashMap" resultType="int">
        SELECT IFNULL(
			(SELECT idx
			FROM book
			WHERE name = #{name}
			AND author = #{author}), -1) as idx;
    </select>
    
    <select id="getUserReviewBasedRecommend" parameterType = "int" resultType = "com.team4.bookreview.vo.BookwithstarVO">
	    select A.idx, A.name, A.author, A.genre, AVG(B.star) star 
		from book A
		INNER JOIN (select distinct book, star 
				from review 
	            where writer in ( select writer 
					from br.review 
	                                where book in 
	                                ( select book 
	                                from review 
	                                where writer= #{writer}
	                                and star >= 3 ))
	                                and star >= 3 
	                                order by star desc) B ON A.idx = B.book group by idx order by star desc;
    </select>
    
        
    <select id="getUserHistoryBasedRecommend" parameterType = "int" resultType = "com.team4.bookreview.vo.BookwithstarVO">
	   SELECT A.idx, A.name, A.author, A.genre, AVG(B.star) star 
		FROM br.book A
		INNER JOIN 
			(SELECT book, star
			FROM br.review
			WHERE book in	
				(SELECT book 
				FROM br.history
				WHERE user IN (SELECT DISTINCT user  
				FROM br.history h, (SELECT book
									FROM br.history 
									WHERE user = #{writer}
									ORDER BY date desc
									LIMIT 5) myb                    
				WHERE h.book = myb.book 
				AND user != 52442996)
				ORDER BY date DESC)
			) B
		ON A.idx = B.book 
		GROUP BY idx ORDER BY star DESC
		LIMIT 5;
    </select>
    
    
        <select id="getDataBasedRecommend" parameterType = "int" resultType = "com.team4.bookreview.vo.BookwithstarVO">
			  select * from br.book
		where idx in
		(select * from 
			(select book from 
			(
				(select book, date as newdate
				 from br.history 
				 where user = #{writer}  order by newdate Desc limit 3) 
				UNION ALL
				(select book, DATE_ADD(date, INTERVAL 7 DAY) as newdate
				 from br.review 
				 where writer = #{writer} order by newdate Desc limit 3) 
				ORDER BY 1
			) recent 
			order by newdate desc  limit 3)  books 
		group by book) 

    </select>
</mapper>
